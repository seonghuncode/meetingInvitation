# PostgreSQL과 Spring Boot를 연결하기 위한 Compose설정 파일
version: '3.8'

services:
  app:
#    image: 'meetinginvitationsimg1:latest'
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-db:5432/meetingInvitation -> docker에 설치한 db사용시
      SPRING_DATASOURCE_URL: jdbc:postgresql://host.docker.internal:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
<<<<<<< HEAD
#    depends_on:
#      - postgres-db
=======
      SPRING_SSL_KEYSTORE: file:/keystore.p12
      SECRET_KEY: ${SECRET_KEY}
      CLIENT_ID: ${CLIENT_ID}
      CLIENT_SECRET: ${CLIENT_SECRET}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: ${REDIS_PORT}
    volumes:
      - ./keystore.p12:/keystore.p12
      - /var/www/uploads:/var/www/uploads
    depends_on:
      - postgres-db
      - redis
    env_file:
      - .env.prod
>>>>>>> 27ba6721f7dcd753ca09bb209b1e3b56b5d97fda


# 기존 PostgreSQL을 사용하지 않고 새로운 컨테이너에 PostgreSQL을 설치해서 사용할 경우
#  postgres-db:
#    image: postgres:latest
#    container_name: postgres-db
#    environment:
#      POSTGRES_USER: ${DB_USER}
#      POSTGRES_PASSWORD: ${DB_PASSWORD}
#      POSTGRES_DB: ${DB_NAME}
#    ports:
#      - "5432:5432"
#    volumes:
#      - postgres-data:/var/lib/postgresql/data

  redis:
    image: redis:latest
    container_name: redis-server
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

volumes:
  postgres-data:
<<<<<<< HEAD
    external: true #볼륨을 외부에서 유지(초기화 방지), DB가 Docker외부에 있을 경우
=======
  redis-data:
#    external: true #볼륨을 외부에서 유지(초기화 방지), DB가 Docker외부에 있을 경우
>>>>>>> 27ba6721f7dcd753ca09bb209b1e3b56b5d97fda
